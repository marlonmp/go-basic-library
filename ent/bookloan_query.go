// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marlonmp/go-basic-library/ent/book"
	"github.com/marlonmp/go-basic-library/ent/bookloan"
	"github.com/marlonmp/go-basic-library/ent/predicate"
	"github.com/marlonmp/go-basic-library/ent/user"
)

// BookLoanQuery is the builder for querying BookLoan entities.
type BookLoanQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.BookLoan
	// eager-loading edges.
	withUser *UserQuery
	withBook *BookQuery
	withFKs  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BookLoanQuery builder.
func (blq *BookLoanQuery) Where(ps ...predicate.BookLoan) *BookLoanQuery {
	blq.predicates = append(blq.predicates, ps...)
	return blq
}

// Limit adds a limit step to the query.
func (blq *BookLoanQuery) Limit(limit int) *BookLoanQuery {
	blq.limit = &limit
	return blq
}

// Offset adds an offset step to the query.
func (blq *BookLoanQuery) Offset(offset int) *BookLoanQuery {
	blq.offset = &offset
	return blq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (blq *BookLoanQuery) Unique(unique bool) *BookLoanQuery {
	blq.unique = &unique
	return blq
}

// Order adds an order step to the query.
func (blq *BookLoanQuery) Order(o ...OrderFunc) *BookLoanQuery {
	blq.order = append(blq.order, o...)
	return blq
}

// QueryUser chains the current query on the "user" edge.
func (blq *BookLoanQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: blq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookloan.Table, bookloan.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookloan.UserTable, bookloan.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBook chains the current query on the "book" edge.
func (blq *BookLoanQuery) QueryBook() *BookQuery {
	query := &BookQuery{config: blq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookloan.Table, bookloan.FieldID, selector),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookloan.BookTable, bookloan.BookColumn),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BookLoan entity from the query.
// Returns a *NotFoundError when no BookLoan was found.
func (blq *BookLoanQuery) First(ctx context.Context) (*BookLoan, error) {
	nodes, err := blq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bookloan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (blq *BookLoanQuery) FirstX(ctx context.Context) *BookLoan {
	node, err := blq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BookLoan ID from the query.
// Returns a *NotFoundError when no BookLoan ID was found.
func (blq *BookLoanQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = blq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bookloan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (blq *BookLoanQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := blq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BookLoan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BookLoan entity is found.
// Returns a *NotFoundError when no BookLoan entities are found.
func (blq *BookLoanQuery) Only(ctx context.Context) (*BookLoan, error) {
	nodes, err := blq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bookloan.Label}
	default:
		return nil, &NotSingularError{bookloan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (blq *BookLoanQuery) OnlyX(ctx context.Context) *BookLoan {
	node, err := blq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BookLoan ID in the query.
// Returns a *NotSingularError when more than one BookLoan ID is found.
// Returns a *NotFoundError when no entities are found.
func (blq *BookLoanQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = blq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = &NotSingularError{bookloan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (blq *BookLoanQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := blq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BookLoans.
func (blq *BookLoanQuery) All(ctx context.Context) ([]*BookLoan, error) {
	if err := blq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return blq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (blq *BookLoanQuery) AllX(ctx context.Context) []*BookLoan {
	nodes, err := blq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BookLoan IDs.
func (blq *BookLoanQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := blq.Select(bookloan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (blq *BookLoanQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := blq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (blq *BookLoanQuery) Count(ctx context.Context) (int, error) {
	if err := blq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return blq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (blq *BookLoanQuery) CountX(ctx context.Context) int {
	count, err := blq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (blq *BookLoanQuery) Exist(ctx context.Context) (bool, error) {
	if err := blq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return blq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (blq *BookLoanQuery) ExistX(ctx context.Context) bool {
	exist, err := blq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BookLoanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (blq *BookLoanQuery) Clone() *BookLoanQuery {
	if blq == nil {
		return nil
	}
	return &BookLoanQuery{
		config:     blq.config,
		limit:      blq.limit,
		offset:     blq.offset,
		order:      append([]OrderFunc{}, blq.order...),
		predicates: append([]predicate.BookLoan{}, blq.predicates...),
		withUser:   blq.withUser.Clone(),
		withBook:   blq.withBook.Clone(),
		// clone intermediate query.
		sql:    blq.sql.Clone(),
		path:   blq.path,
		unique: blq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BookLoanQuery) WithUser(opts ...func(*UserQuery)) *BookLoanQuery {
	query := &UserQuery{config: blq.config}
	for _, opt := range opts {
		opt(query)
	}
	blq.withUser = query
	return blq
}

// WithBook tells the query-builder to eager-load the nodes that are connected to
// the "book" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BookLoanQuery) WithBook(opts ...func(*BookQuery)) *BookLoanQuery {
	query := &BookQuery{config: blq.config}
	for _, opt := range opts {
		opt(query)
	}
	blq.withBook = query
	return blq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateAt time.Time `json:"create_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BookLoan.Query().
//		GroupBy(bookloan.FieldCreateAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (blq *BookLoanQuery) GroupBy(field string, fields ...string) *BookLoanGroupBy {
	group := &BookLoanGroupBy{config: blq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return blq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateAt time.Time `json:"create_at,omitempty"`
//	}
//
//	client.BookLoan.Query().
//		Select(bookloan.FieldCreateAt).
//		Scan(ctx, &v)
//
func (blq *BookLoanQuery) Select(fields ...string) *BookLoanSelect {
	blq.fields = append(blq.fields, fields...)
	return &BookLoanSelect{BookLoanQuery: blq}
}

func (blq *BookLoanQuery) prepareQuery(ctx context.Context) error {
	for _, f := range blq.fields {
		if !bookloan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if blq.path != nil {
		prev, err := blq.path(ctx)
		if err != nil {
			return err
		}
		blq.sql = prev
	}
	return nil
}

func (blq *BookLoanQuery) sqlAll(ctx context.Context) ([]*BookLoan, error) {
	var (
		nodes       = []*BookLoan{}
		withFKs     = blq.withFKs
		_spec       = blq.querySpec()
		loadedTypes = [2]bool{
			blq.withUser != nil,
			blq.withBook != nil,
		}
	)
	if blq.withUser != nil || blq.withBook != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, bookloan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &BookLoan{config: blq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, blq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := blq.withUser; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*BookLoan)
		for i := range nodes {
			if nodes[i].user_loans == nil {
				continue
			}
			fk := *nodes[i].user_loans
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_loans" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := blq.withBook; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*BookLoan)
		for i := range nodes {
			if nodes[i].book_on_loans == nil {
				continue
			}
			fk := *nodes[i].book_on_loans
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(book.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "book_on_loans" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Book = n
			}
		}
	}

	return nodes, nil
}

func (blq *BookLoanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := blq.querySpec()
	_spec.Node.Columns = blq.fields
	if len(blq.fields) > 0 {
		_spec.Unique = blq.unique != nil && *blq.unique
	}
	return sqlgraph.CountNodes(ctx, blq.driver, _spec)
}

func (blq *BookLoanQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := blq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (blq *BookLoanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookloan.Table,
			Columns: bookloan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bookloan.FieldID,
			},
		},
		From:   blq.sql,
		Unique: true,
	}
	if unique := blq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := blq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookloan.FieldID)
		for i := range fields {
			if fields[i] != bookloan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := blq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := blq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := blq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := blq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (blq *BookLoanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(blq.driver.Dialect())
	t1 := builder.Table(bookloan.Table)
	columns := blq.fields
	if len(columns) == 0 {
		columns = bookloan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if blq.sql != nil {
		selector = blq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if blq.unique != nil && *blq.unique {
		selector.Distinct()
	}
	for _, p := range blq.predicates {
		p(selector)
	}
	for _, p := range blq.order {
		p(selector)
	}
	if offset := blq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := blq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BookLoanGroupBy is the group-by builder for BookLoan entities.
type BookLoanGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (blgb *BookLoanGroupBy) Aggregate(fns ...AggregateFunc) *BookLoanGroupBy {
	blgb.fns = append(blgb.fns, fns...)
	return blgb
}

// Scan applies the group-by query and scans the result into the given value.
func (blgb *BookLoanGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := blgb.path(ctx)
	if err != nil {
		return err
	}
	blgb.sql = query
	return blgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (blgb *BookLoanGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := blgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(blgb.fields) > 1 {
		return nil, errors.New("ent: BookLoanGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := blgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (blgb *BookLoanGroupBy) StringsX(ctx context.Context) []string {
	v, err := blgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = blgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (blgb *BookLoanGroupBy) StringX(ctx context.Context) string {
	v, err := blgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(blgb.fields) > 1 {
		return nil, errors.New("ent: BookLoanGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := blgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (blgb *BookLoanGroupBy) IntsX(ctx context.Context) []int {
	v, err := blgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = blgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (blgb *BookLoanGroupBy) IntX(ctx context.Context) int {
	v, err := blgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(blgb.fields) > 1 {
		return nil, errors.New("ent: BookLoanGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := blgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (blgb *BookLoanGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := blgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = blgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (blgb *BookLoanGroupBy) Float64X(ctx context.Context) float64 {
	v, err := blgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(blgb.fields) > 1 {
		return nil, errors.New("ent: BookLoanGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := blgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (blgb *BookLoanGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := blgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (blgb *BookLoanGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = blgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (blgb *BookLoanGroupBy) BoolX(ctx context.Context) bool {
	v, err := blgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (blgb *BookLoanGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range blgb.fields {
		if !bookloan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := blgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := blgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (blgb *BookLoanGroupBy) sqlQuery() *sql.Selector {
	selector := blgb.sql.Select()
	aggregation := make([]string, 0, len(blgb.fns))
	for _, fn := range blgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(blgb.fields)+len(blgb.fns))
		for _, f := range blgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(blgb.fields...)...)
}

// BookLoanSelect is the builder for selecting fields of BookLoan entities.
type BookLoanSelect struct {
	*BookLoanQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bls *BookLoanSelect) Scan(ctx context.Context, v interface{}) error {
	if err := bls.prepareQuery(ctx); err != nil {
		return err
	}
	bls.sql = bls.BookLoanQuery.sqlQuery(ctx)
	return bls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bls *BookLoanSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bls.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bls.fields) > 1 {
		return nil, errors.New("ent: BookLoanSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bls *BookLoanSelect) StringsX(ctx context.Context) []string {
	v, err := bls.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bls.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bls *BookLoanSelect) StringX(ctx context.Context) string {
	v, err := bls.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bls.fields) > 1 {
		return nil, errors.New("ent: BookLoanSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bls *BookLoanSelect) IntsX(ctx context.Context) []int {
	v, err := bls.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bls.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bls *BookLoanSelect) IntX(ctx context.Context) int {
	v, err := bls.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bls.fields) > 1 {
		return nil, errors.New("ent: BookLoanSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bls *BookLoanSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bls.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bls.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bls *BookLoanSelect) Float64X(ctx context.Context) float64 {
	v, err := bls.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bls.fields) > 1 {
		return nil, errors.New("ent: BookLoanSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bls *BookLoanSelect) BoolsX(ctx context.Context) []bool {
	v, err := bls.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (bls *BookLoanSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bls.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{bookloan.Label}
	default:
		err = fmt.Errorf("ent: BookLoanSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bls *BookLoanSelect) BoolX(ctx context.Context) bool {
	v, err := bls.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bls *BookLoanSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bls.sql.Query()
	if err := bls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
