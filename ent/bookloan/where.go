// Code generated by entc, DO NOT EDIT.

package bookloan

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/marlonmp/go-basic-library/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// LoanDate applies equality check predicate on the "loan_date" field. It's identical to LoanDateEQ.
func LoanDate(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoanDate), v))
	})
}

// DeliveryDate applies equality check predicate on the "delivery_date" field. It's identical to DeliveryDateEQ.
func DeliveryDate(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryDate), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// LoanDateEQ applies the EQ predicate on the "loan_date" field.
func LoanDateEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoanDate), v))
	})
}

// LoanDateNEQ applies the NEQ predicate on the "loan_date" field.
func LoanDateNEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoanDate), v))
	})
}

// LoanDateIn applies the In predicate on the "loan_date" field.
func LoanDateIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLoanDate), v...))
	})
}

// LoanDateNotIn applies the NotIn predicate on the "loan_date" field.
func LoanDateNotIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLoanDate), v...))
	})
}

// LoanDateGT applies the GT predicate on the "loan_date" field.
func LoanDateGT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoanDate), v))
	})
}

// LoanDateGTE applies the GTE predicate on the "loan_date" field.
func LoanDateGTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoanDate), v))
	})
}

// LoanDateLT applies the LT predicate on the "loan_date" field.
func LoanDateLT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoanDate), v))
	})
}

// LoanDateLTE applies the LTE predicate on the "loan_date" field.
func LoanDateLTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoanDate), v))
	})
}

// DeliveryDateEQ applies the EQ predicate on the "delivery_date" field.
func DeliveryDateEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryDate), v))
	})
}

// DeliveryDateNEQ applies the NEQ predicate on the "delivery_date" field.
func DeliveryDateNEQ(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryDate), v))
	})
}

// DeliveryDateIn applies the In predicate on the "delivery_date" field.
func DeliveryDateIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeliveryDate), v...))
	})
}

// DeliveryDateNotIn applies the NotIn predicate on the "delivery_date" field.
func DeliveryDateNotIn(vs ...time.Time) predicate.BookLoan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookLoan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeliveryDate), v...))
	})
}

// DeliveryDateGT applies the GT predicate on the "delivery_date" field.
func DeliveryDateGT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryDate), v))
	})
}

// DeliveryDateGTE applies the GTE predicate on the "delivery_date" field.
func DeliveryDateGTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryDate), v))
	})
}

// DeliveryDateLT applies the LT predicate on the "delivery_date" field.
func DeliveryDateLT(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryDate), v))
	})
}

// DeliveryDateLTE applies the LTE predicate on the "delivery_date" field.
func DeliveryDateLTE(v time.Time) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryDate), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBook applies the HasEdge predicate on the "book" edge.
func HasBook() predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BookTable, BookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookWith applies the HasEdge predicate on the "book" edge with a given conditions (other predicates).
func HasBookWith(preds ...predicate.Book) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BookTable, BookColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BookLoan) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BookLoan) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BookLoan) predicate.BookLoan {
	return predicate.BookLoan(func(s *sql.Selector) {
		p(s.Not())
	})
}
