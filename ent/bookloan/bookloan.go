// Code generated by entc, DO NOT EDIT.

package bookloan

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the bookloan type in the database.
	Label = "book_loan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLoanDate holds the string denoting the loan_date field in the database.
	FieldLoanDate = "loan_date"
	// FieldDeliveryDate holds the string denoting the delivery_date field in the database.
	FieldDeliveryDate = "delivery_date"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBook holds the string denoting the book edge name in mutations.
	EdgeBook = "book"
	// Table holds the table name of the bookloan in the database.
	Table = "book_loans"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "book_loans"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_loans"
	// BookTable is the table that holds the book relation/edge.
	BookTable = "book_loans"
	// BookInverseTable is the table name for the Book entity.
	// It exists in this package in order to avoid circular dependency with the "book" package.
	BookInverseTable = "books"
	// BookColumn is the table column denoting the book relation/edge.
	BookColumn = "book_on_loans"
)

// Columns holds all SQL columns for bookloan fields.
var Columns = []string{
	FieldID,
	FieldCreateAt,
	FieldUpdatedAt,
	FieldLoanDate,
	FieldDeliveryDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "book_loans"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"book_on_loans",
	"user_loans",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultLoanDate holds the default value on creation for the "loan_date" field.
	DefaultLoanDate func() time.Time
	// DefaultDeliveryDate holds the default value on creation for the "delivery_date" field.
	DefaultDeliveryDate func() time.Time
	// UpdateDefaultDeliveryDate holds the default value on update for the "delivery_date" field.
	UpdateDefaultDeliveryDate func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
