// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marlonmp/go-basic-library/ent/book"
	"github.com/marlonmp/go-basic-library/ent/bookloan"
	"github.com/marlonmp/go-basic-library/ent/predicate"
	"github.com/marlonmp/go-basic-library/ent/user"
)

// BookLoanUpdate is the builder for updating BookLoan entities.
type BookLoanUpdate struct {
	config
	hooks    []Hook
	mutation *BookLoanMutation
}

// Where appends a list predicates to the BookLoanUpdate builder.
func (blu *BookLoanUpdate) Where(ps ...predicate.BookLoan) *BookLoanUpdate {
	blu.mutation.Where(ps...)
	return blu
}

// SetUpdatedAt sets the "updated_at" field.
func (blu *BookLoanUpdate) SetUpdatedAt(t time.Time) *BookLoanUpdate {
	blu.mutation.SetUpdatedAt(t)
	return blu
}

// SetDeliveryDate sets the "delivery_date" field.
func (blu *BookLoanUpdate) SetDeliveryDate(t time.Time) *BookLoanUpdate {
	blu.mutation.SetDeliveryDate(t)
	return blu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (blu *BookLoanUpdate) SetUserID(id uuid.UUID) *BookLoanUpdate {
	blu.mutation.SetUserID(id)
	return blu
}

// SetUser sets the "user" edge to the User entity.
func (blu *BookLoanUpdate) SetUser(u *User) *BookLoanUpdate {
	return blu.SetUserID(u.ID)
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (blu *BookLoanUpdate) SetBookID(id uuid.UUID) *BookLoanUpdate {
	blu.mutation.SetBookID(id)
	return blu
}

// SetBook sets the "book" edge to the Book entity.
func (blu *BookLoanUpdate) SetBook(b *Book) *BookLoanUpdate {
	return blu.SetBookID(b.ID)
}

// Mutation returns the BookLoanMutation object of the builder.
func (blu *BookLoanUpdate) Mutation() *BookLoanMutation {
	return blu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (blu *BookLoanUpdate) ClearUser() *BookLoanUpdate {
	blu.mutation.ClearUser()
	return blu
}

// ClearBook clears the "book" edge to the Book entity.
func (blu *BookLoanUpdate) ClearBook() *BookLoanUpdate {
	blu.mutation.ClearBook()
	return blu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (blu *BookLoanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	blu.defaults()
	if len(blu.hooks) == 0 {
		if err = blu.check(); err != nil {
			return 0, err
		}
		affected, err = blu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookLoanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = blu.check(); err != nil {
				return 0, err
			}
			blu.mutation = mutation
			affected, err = blu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(blu.hooks) - 1; i >= 0; i-- {
			if blu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = blu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, blu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (blu *BookLoanUpdate) SaveX(ctx context.Context) int {
	affected, err := blu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (blu *BookLoanUpdate) Exec(ctx context.Context) error {
	_, err := blu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blu *BookLoanUpdate) ExecX(ctx context.Context) {
	if err := blu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blu *BookLoanUpdate) defaults() {
	if _, ok := blu.mutation.UpdatedAt(); !ok {
		v := bookloan.UpdateDefaultUpdatedAt()
		blu.mutation.SetUpdatedAt(v)
	}
	if _, ok := blu.mutation.DeliveryDate(); !ok {
		v := bookloan.UpdateDefaultDeliveryDate()
		blu.mutation.SetDeliveryDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blu *BookLoanUpdate) check() error {
	if _, ok := blu.mutation.UserID(); blu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BookLoan.user"`)
	}
	if _, ok := blu.mutation.BookID(); blu.mutation.BookCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BookLoan.book"`)
	}
	return nil
}

func (blu *BookLoanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookloan.Table,
			Columns: bookloan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bookloan.FieldID,
			},
		},
	}
	if ps := blu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldUpdatedAt,
		})
	}
	if value, ok := blu.mutation.DeliveryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldDeliveryDate,
		})
	}
	if blu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.UserTable,
			Columns: []string{bookloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.UserTable,
			Columns: []string{bookloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if blu.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.BookTable,
			Columns: []string{bookloan.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.BookTable,
			Columns: []string{bookloan.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, blu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookloan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BookLoanUpdateOne is the builder for updating a single BookLoan entity.
type BookLoanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookLoanMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bluo *BookLoanUpdateOne) SetUpdatedAt(t time.Time) *BookLoanUpdateOne {
	bluo.mutation.SetUpdatedAt(t)
	return bluo
}

// SetDeliveryDate sets the "delivery_date" field.
func (bluo *BookLoanUpdateOne) SetDeliveryDate(t time.Time) *BookLoanUpdateOne {
	bluo.mutation.SetDeliveryDate(t)
	return bluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bluo *BookLoanUpdateOne) SetUserID(id uuid.UUID) *BookLoanUpdateOne {
	bluo.mutation.SetUserID(id)
	return bluo
}

// SetUser sets the "user" edge to the User entity.
func (bluo *BookLoanUpdateOne) SetUser(u *User) *BookLoanUpdateOne {
	return bluo.SetUserID(u.ID)
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (bluo *BookLoanUpdateOne) SetBookID(id uuid.UUID) *BookLoanUpdateOne {
	bluo.mutation.SetBookID(id)
	return bluo
}

// SetBook sets the "book" edge to the Book entity.
func (bluo *BookLoanUpdateOne) SetBook(b *Book) *BookLoanUpdateOne {
	return bluo.SetBookID(b.ID)
}

// Mutation returns the BookLoanMutation object of the builder.
func (bluo *BookLoanUpdateOne) Mutation() *BookLoanMutation {
	return bluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bluo *BookLoanUpdateOne) ClearUser() *BookLoanUpdateOne {
	bluo.mutation.ClearUser()
	return bluo
}

// ClearBook clears the "book" edge to the Book entity.
func (bluo *BookLoanUpdateOne) ClearBook() *BookLoanUpdateOne {
	bluo.mutation.ClearBook()
	return bluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bluo *BookLoanUpdateOne) Select(field string, fields ...string) *BookLoanUpdateOne {
	bluo.fields = append([]string{field}, fields...)
	return bluo
}

// Save executes the query and returns the updated BookLoan entity.
func (bluo *BookLoanUpdateOne) Save(ctx context.Context) (*BookLoan, error) {
	var (
		err  error
		node *BookLoan
	)
	bluo.defaults()
	if len(bluo.hooks) == 0 {
		if err = bluo.check(); err != nil {
			return nil, err
		}
		node, err = bluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookLoanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bluo.check(); err != nil {
				return nil, err
			}
			bluo.mutation = mutation
			node, err = bluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bluo.hooks) - 1; i >= 0; i-- {
			if bluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bluo *BookLoanUpdateOne) SaveX(ctx context.Context) *BookLoan {
	node, err := bluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bluo *BookLoanUpdateOne) Exec(ctx context.Context) error {
	_, err := bluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bluo *BookLoanUpdateOne) ExecX(ctx context.Context) {
	if err := bluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bluo *BookLoanUpdateOne) defaults() {
	if _, ok := bluo.mutation.UpdatedAt(); !ok {
		v := bookloan.UpdateDefaultUpdatedAt()
		bluo.mutation.SetUpdatedAt(v)
	}
	if _, ok := bluo.mutation.DeliveryDate(); !ok {
		v := bookloan.UpdateDefaultDeliveryDate()
		bluo.mutation.SetDeliveryDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bluo *BookLoanUpdateOne) check() error {
	if _, ok := bluo.mutation.UserID(); bluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BookLoan.user"`)
	}
	if _, ok := bluo.mutation.BookID(); bluo.mutation.BookCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BookLoan.book"`)
	}
	return nil
}

func (bluo *BookLoanUpdateOne) sqlSave(ctx context.Context) (_node *BookLoan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookloan.Table,
			Columns: bookloan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bookloan.FieldID,
			},
		},
	}
	id, ok := bluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookLoan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookloan.FieldID)
		for _, f := range fields {
			if !bookloan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookloan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldUpdatedAt,
		})
	}
	if value, ok := bluo.mutation.DeliveryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldDeliveryDate,
		})
	}
	if bluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.UserTable,
			Columns: []string{bookloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.UserTable,
			Columns: []string{bookloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bluo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.BookTable,
			Columns: []string{bookloan.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.BookTable,
			Columns: []string{bookloan.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BookLoan{config: bluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookloan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
