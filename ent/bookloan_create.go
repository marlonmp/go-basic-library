// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/marlonmp/go-basic-library/ent/book"
	"github.com/marlonmp/go-basic-library/ent/bookloan"
	"github.com/marlonmp/go-basic-library/ent/user"
)

// BookLoanCreate is the builder for creating a BookLoan entity.
type BookLoanCreate struct {
	config
	mutation *BookLoanMutation
	hooks    []Hook
}

// SetCreateAt sets the "create_at" field.
func (blc *BookLoanCreate) SetCreateAt(t time.Time) *BookLoanCreate {
	blc.mutation.SetCreateAt(t)
	return blc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (blc *BookLoanCreate) SetNillableCreateAt(t *time.Time) *BookLoanCreate {
	if t != nil {
		blc.SetCreateAt(*t)
	}
	return blc
}

// SetUpdatedAt sets the "updated_at" field.
func (blc *BookLoanCreate) SetUpdatedAt(t time.Time) *BookLoanCreate {
	blc.mutation.SetUpdatedAt(t)
	return blc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (blc *BookLoanCreate) SetNillableUpdatedAt(t *time.Time) *BookLoanCreate {
	if t != nil {
		blc.SetUpdatedAt(*t)
	}
	return blc
}

// SetLoanDate sets the "loan_date" field.
func (blc *BookLoanCreate) SetLoanDate(t time.Time) *BookLoanCreate {
	blc.mutation.SetLoanDate(t)
	return blc
}

// SetNillableLoanDate sets the "loan_date" field if the given value is not nil.
func (blc *BookLoanCreate) SetNillableLoanDate(t *time.Time) *BookLoanCreate {
	if t != nil {
		blc.SetLoanDate(*t)
	}
	return blc
}

// SetDeliveryDate sets the "delivery_date" field.
func (blc *BookLoanCreate) SetDeliveryDate(t time.Time) *BookLoanCreate {
	blc.mutation.SetDeliveryDate(t)
	return blc
}

// SetNillableDeliveryDate sets the "delivery_date" field if the given value is not nil.
func (blc *BookLoanCreate) SetNillableDeliveryDate(t *time.Time) *BookLoanCreate {
	if t != nil {
		blc.SetDeliveryDate(*t)
	}
	return blc
}

// SetID sets the "id" field.
func (blc *BookLoanCreate) SetID(u uuid.UUID) *BookLoanCreate {
	blc.mutation.SetID(u)
	return blc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (blc *BookLoanCreate) SetNillableID(u *uuid.UUID) *BookLoanCreate {
	if u != nil {
		blc.SetID(*u)
	}
	return blc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (blc *BookLoanCreate) SetUserID(id uuid.UUID) *BookLoanCreate {
	blc.mutation.SetUserID(id)
	return blc
}

// SetUser sets the "user" edge to the User entity.
func (blc *BookLoanCreate) SetUser(u *User) *BookLoanCreate {
	return blc.SetUserID(u.ID)
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (blc *BookLoanCreate) SetBookID(id uuid.UUID) *BookLoanCreate {
	blc.mutation.SetBookID(id)
	return blc
}

// SetBook sets the "book" edge to the Book entity.
func (blc *BookLoanCreate) SetBook(b *Book) *BookLoanCreate {
	return blc.SetBookID(b.ID)
}

// Mutation returns the BookLoanMutation object of the builder.
func (blc *BookLoanCreate) Mutation() *BookLoanMutation {
	return blc.mutation
}

// Save creates the BookLoan in the database.
func (blc *BookLoanCreate) Save(ctx context.Context) (*BookLoan, error) {
	var (
		err  error
		node *BookLoan
	)
	blc.defaults()
	if len(blc.hooks) == 0 {
		if err = blc.check(); err != nil {
			return nil, err
		}
		node, err = blc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookLoanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = blc.check(); err != nil {
				return nil, err
			}
			blc.mutation = mutation
			if node, err = blc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(blc.hooks) - 1; i >= 0; i-- {
			if blc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = blc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, blc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (blc *BookLoanCreate) SaveX(ctx context.Context) *BookLoan {
	v, err := blc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blc *BookLoanCreate) Exec(ctx context.Context) error {
	_, err := blc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blc *BookLoanCreate) ExecX(ctx context.Context) {
	if err := blc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blc *BookLoanCreate) defaults() {
	if _, ok := blc.mutation.CreateAt(); !ok {
		v := bookloan.DefaultCreateAt()
		blc.mutation.SetCreateAt(v)
	}
	if _, ok := blc.mutation.UpdatedAt(); !ok {
		v := bookloan.DefaultUpdatedAt()
		blc.mutation.SetUpdatedAt(v)
	}
	if _, ok := blc.mutation.LoanDate(); !ok {
		v := bookloan.DefaultLoanDate()
		blc.mutation.SetLoanDate(v)
	}
	if _, ok := blc.mutation.DeliveryDate(); !ok {
		v := bookloan.DefaultDeliveryDate()
		blc.mutation.SetDeliveryDate(v)
	}
	if _, ok := blc.mutation.ID(); !ok {
		v := bookloan.DefaultID()
		blc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blc *BookLoanCreate) check() error {
	if _, ok := blc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "BookLoan.create_at"`)}
	}
	if _, ok := blc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BookLoan.updated_at"`)}
	}
	if _, ok := blc.mutation.LoanDate(); !ok {
		return &ValidationError{Name: "loan_date", err: errors.New(`ent: missing required field "BookLoan.loan_date"`)}
	}
	if _, ok := blc.mutation.DeliveryDate(); !ok {
		return &ValidationError{Name: "delivery_date", err: errors.New(`ent: missing required field "BookLoan.delivery_date"`)}
	}
	if _, ok := blc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "BookLoan.user"`)}
	}
	if _, ok := blc.mutation.BookID(); !ok {
		return &ValidationError{Name: "book", err: errors.New(`ent: missing required edge "BookLoan.book"`)}
	}
	return nil
}

func (blc *BookLoanCreate) sqlSave(ctx context.Context) (*BookLoan, error) {
	_node, _spec := blc.createSpec()
	if err := sqlgraph.CreateNode(ctx, blc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (blc *BookLoanCreate) createSpec() (*BookLoan, *sqlgraph.CreateSpec) {
	var (
		_node = &BookLoan{config: blc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bookloan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bookloan.FieldID,
			},
		}
	)
	if id, ok := blc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := blc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := blc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := blc.mutation.LoanDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldLoanDate,
		})
		_node.LoanDate = value
	}
	if value, ok := blc.mutation.DeliveryDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookloan.FieldDeliveryDate,
		})
		_node.DeliveryDate = value
	}
	if nodes := blc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.UserTable,
			Columns: []string{bookloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_loans = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := blc.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookloan.BookTable,
			Columns: []string{bookloan.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.book_on_loans = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BookLoanCreateBulk is the builder for creating many BookLoan entities in bulk.
type BookLoanCreateBulk struct {
	config
	builders []*BookLoanCreate
}

// Save creates the BookLoan entities in the database.
func (blcb *BookLoanCreateBulk) Save(ctx context.Context) ([]*BookLoan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(blcb.builders))
	nodes := make([]*BookLoan, len(blcb.builders))
	mutators := make([]Mutator, len(blcb.builders))
	for i := range blcb.builders {
		func(i int, root context.Context) {
			builder := blcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookLoanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, blcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, blcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, blcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (blcb *BookLoanCreateBulk) SaveX(ctx context.Context) []*BookLoan {
	v, err := blcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blcb *BookLoanCreateBulk) Exec(ctx context.Context) error {
	_, err := blcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blcb *BookLoanCreateBulk) ExecX(ctx context.Context) {
	if err := blcb.Exec(ctx); err != nil {
		panic(err)
	}
}
